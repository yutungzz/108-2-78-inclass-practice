pick_2<-studentHeights$`年齡層` <= 12
pick_3<-studentHeights$`年齡層` >= 9
pick_4<-studentHeights$`年齡層` <= 15
pick_5<-studentHeights$`年齡層` >= 13
"6-8" <- mean(studentHeights$`平均身高`[pick_1])
"9-12" <- mean(studentHeights$`平均身高`[pick_2&pick_3])
"13-15" <- mean(studentHeights$`平均身高`[pick_4&pick_5])
averageHeightByGroup <- c("6-8","9-12","13-15")
averageHeightByGroup
# averageHeightByGroup
pick_1<-studentHeights$`年齡層` <= 8
pick_2<-studentHeights$`年齡層` <= 12
pick_3<-studentHeights$`年齡層` >= 9
pick_4<-studentHeights$`年齡層` <= 15
pick_5<-studentHeights$`年齡層` >= 13
"6-8" <- mean(studentHeights$`平均身高`[pick_1])
"9-12" <- mean(studentHeights$`平均身高`[pick_2&pick_3])
"13-15" <- mean(studentHeights$`平均身高`[pick_4&pick_5])
averageHeightByGroup <- c("6-8","9-12","13-15")
averageHeightByGroup
# averageHeightByGroup
library(stringr)
pick_male <-stringr::str_detect(studentHeights$`類別`,"男")
pick_female <-stringr::str_detect(studentHeights$`類別`,"女")
"6-8" <- mean(studentHeights$`平均身高`[pick_1][pick_male-pick_female])
"9-12" <- mean(studentHeights$`平均身高`[pick_2&pick_3][pick_male-pick_female])
"13-15" <- mean(studentHeights$`平均身高`[pick_4&pick_5][pick_male-pick_female])
heightDifferenceByGroup <- c("6-8", "9-12", "13-15")
heightDifferenceByGroup
# heightDifferenceByGroup
library(stringr)
a <-stringr::str_detect(studentHeights$`類別`,"男")
b <-stringr::str_detect(studentHeights$`類別`,"女")
"6-8" <- mean(studentHeights$`平均身高`[pick_1][a-b])
"9-12" <- mean(studentHeights$`平均身高`[pick_2&pick_3][a-b])
"13-15" <- mean(studentHeights$`平均身高`[pick_4&pick_5][a-b])
heightDifferenceByGroup <- c("6-8", "9-12", "13-15")
heightDifferenceByGroup
# heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- str_view_all(differentMajors)
realEstateRegex
# realEstateRegex
realEstateRegex <- str_view_all(differentMajors)
realEstateRegex
# realEstateRegex
library(stringr)
a <-stringr::str_detect(studentHeights$`類別`,"男")
b <-stringr::str_detect(studentHeights$`類別`,"女")
"6-8" <- mean(studentHeights$`平均身高`[pick_1][a-b])
"9-12" <- mean(studentHeights$`平均身高`[pick_2&pick_3][a-b])
"13-15" <- mean(studentHeights$`平均身高`[pick_4&pick_5][a-b])
heightDifferenceByGroup <- c("6-8", "9-12", "13-15")
heightDifferenceByGroup
# heightDifferenceByGroup
realEstateRegex <- str_view_all(differentMajors)
realEstateRegex
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
factor(differentMajors)
levels(differentMajors)
currentLevels <- levels(differentMajors)
# currentLevels
install.packages("purr")
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
View(dance)
str(dance)
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance, ~.x$title) ->
list_titles
list_titles
#View(list_titles)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
View(dance)
library(purrr)
dance[[8]]$showInfo[[1]]$time
dance[[8]]$showInfo[[1]]$location
#map(dance[[8]]$showInfo,~.x$time)
#map(dance[[8]]$showInfo,~.x$location)
#dance[[8]]$showInfo[[1]]$time
#dance[[8]]$showInfo[[1]]$location
map(dance[[8]]$showInfo,~.x$time)
map(dance[[8]]$showInfo,~.x$location)
dance[[8]]$showInfo[[1]]$time
dance[[8]]$showInfo[[1]]$location
map(dance[[8]]$showInfo,~.x$time) -> list_showTimes_dance8
map(dance[[8]]$showInfo,~.x$location) ->list_locations_dance8
dance[[8]]$showInfo[[1]]$time
dance[[8]]$showInfo[[1]]$location
map(dance[[8]]$showInfo,~.x$time) -> list_showTimes_dance8
map(dance[[8]]$showInfo,~.x$location) -> list_locations_dance8
list_showTimes_dance8
list_locations_dance8
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview", simplifyDataFrame = F) -> busRoutes
View(busRoutes)
busRoutes[[1]]$Id
busRoutes[[1]]$Id
busRoutes[[1]]$providerId
busRoutes[[1]]$providerName
busRoutes[[1]]$nameZh
busRoutes[[1]]$Id
busRoutes[[2]]$Id
#busRoutes[[1]]$providerId
#busRoutes[[1]]$providerName
#busRoutes[[1]]$nameZh
busRoutes[[1]]$Id
busRoutes[[2]]$Id
map(busRoutes,~.x$Id)
#busRoutes[[1]]$providerId
#busRoutes[[1]]$providerName
#busRoutes[[1]]$nameZh
#busRoutes[[1]]$Id
#busRoutes[[2]]$Id
map(busRoutes,~.x$Id)
#busRoutes[[1]]$providerId
map(busRoutes,~.x$providerId)
#busRoutes[[1]]$providerName
map(busRoutes,~.x$providerName)
#busRoutes[[1]]$nameZh
map(busRoutes,~.x$nameZh)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$endTime
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$endTime
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue
knitr::opts_chunk$set(echo = TRUE)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
#map(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time,~.x$startTime)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$endTime
#map(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time,~.x$endTime)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue
#map(weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time,~.x$parameterValue)
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[2]]$time[[1]]$startTime
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
library(purrr)
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[2]]$time[[1]]$startTime
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$endTime
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
#weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$parameter$parameterValue
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$parameter$parameterValue)
#busRoutes[[1]]$Id
#busRoutes[[2]]$Id
map(busRoutes,~.x$Id)
#busRoutes[[1]]$providerId
map(busRoutes,~.x$providerId)
#busRoutes[[1]]$providerName
map(busRoutes,~.x$providerName)
#busRoutes[[1]]$nameZh
map(busRoutes,~.x$nameZh)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$`縣市` <- factor(covid19$`縣市`)
levels(covid19$`縣市`) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$`縣市` <-
factor(
covid19$`縣市`, levels=newLevels
)
levels(covid19$`縣市`)
factor(covid19$`縣市`)%>%
levels(.)%>%
population[.]%>%
sort(., decreasing=T)%>%
names(.)%>%
factor(ovid19$`縣市`, levels=.)%>%
levels(.)
factor(covid19$`縣市`)%>%
levels(.)%>%
population[.]%>%
sort(., decreasing=T)%>%
names(.)%>%
factor(covid19$`縣市`, levels=.)%>%
levels(.)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
View(cpiByIncome)
cpiByIncome[[1]]$Item
cpiByIncome[[2]]$Item
# names_element1
cpiByIncome[[1]]$Item
cpiByIncome[[2]]$Item
# names_element1
cpiByIncome[[1]]$Item
cpiByIncome[[2]]$Item
map(cpiByIncome,~.x$Item) -> names_element1
names_element1
# names_element1
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
cpiByIncome[[1]]$Item
cpiByIncome[[2]]$Item
map(cpiByIncome,~.x$Item) -> names_element1
names_element1
# names_element1
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
courseStructure$`應修系級`=="經濟系1A"
#courseStructure$`應修系級`=="經濟系1"
courseStructure$`科目名稱`[2]
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
#courseStructure$`應修系級`=="經濟系1"
courseStructure$`科目名稱`[2]
#經濟系一年級科目名稱
#map(courseStructure,~.x) -> eco1
#經濟系二年級科目名稱
#map(courseStructure,~.x) -> ec02
#經濟系三年級科目名稱
#map(courseStructure,~.x) -> ec03
#經濟系四年級科目名稱
#map(courseStructure,~.x) -> eco4
#coursesOffered <- c(eco1,ec02,ec03,eco4)
#coursesOffered
# coursesOffered
#courseStructure$`應修系級`=="經濟系1"
courseStructure$`科目名稱`
#經濟系一年級科目名稱
#map(courseStructure,~.x) -> eco1
#經濟系二年級科目名稱
#map(courseStructure,~.x) -> ec02
#經濟系三年級科目名稱
#map(courseStructure,~.x) -> ec03
#經濟系四年級科目名稱
#map(courseStructure,~.x) -> eco4
#coursesOffered <- c(eco1,ec02,ec03,eco4)
#coursesOffered
# coursesOffered
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
environment(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
knitr::opts_chunk$set(echo = TRUE)
supply_return <-
function(p){
q_s <- 0 + 2*p
return(q_s)}
library(lubridate)
what_time_it_is <-
function(t){
time = now()
what_time = with_tz(time, tz="Europe/Paris")
return(what_time)
}
what_time_it_is("Europe/Paris")
library(lubridate)
what_time_it_is <-
function(t){
what_time = with_tz(now(), tz="Europe/Paris")
return(what_time)
}
what_time_it_is("Europe/Paris")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(magrittr)
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/NewTaipei/916?$top=30&$format=JSON") %>%
content -> estimatedArrivalTime_916
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei/939?$top=30&$format=JSON") %>%
content -> route_916
View(estimatedArrivalTime_916)
View(learning_topics)
View(route_916)
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
